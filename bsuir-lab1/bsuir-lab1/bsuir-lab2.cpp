
#include <iostream>
#include <random>

// data definition
struct spis1
{
	int info;
	spis1* next;
};

// methods definitions
void put(spis1** begin, spis1** end, int info);
int get(spis1** begin, spis1** end);
void clear(spis1** begin, spis1** end);
void createRandomQueue(spis1** begin, spis1** end, int size);
void writeQueue(spis1* begin, spis1* end);

// methods implementations
void put(spis1** begin, spis1** end, int info)
{
	spis1* temp = new spis1;
	temp->info = info;
	temp->next = NULL;

	if (*begin == NULL)
	{
		*begin = *end = temp;
	}
	else
	{
		(*end)->next = temp;
		*end = temp;
	}
}

int get(spis1** begin, spis1** end)
{
	int info = NULL;
	if (begin != NULL)
	{
		spis1* temp = *begin;
		info = temp->info;
		*begin = temp->next;
		delete temp;
	}
	return info;
}

void clear(spis1** begin, spis1** end)
{
	spis1* temp; int info;

	while (*begin != NULL)
	{
		temp = *begin;
		info = temp->info;
		// std::cout << inf << std::endl;
		*begin = temp->next;
		delete temp;
	}
}

void createRandomQueue(spis1** begin, spis1** end, int size)
{
	std::random_device rd;  //Will be used to obtain a seed for the random number engine
	std::mt19937_64 gen(rd()); //Standard mersenne_twister_engine seeded with rd()
	std::uniform_int_distribution<int> dis(-50, 50);

	int info = NULL;
	for (int n = 0; n < size; ++n) {
		// Use dis to transform the random unsigned int generated by gen into a
		// double in [1, 2). Each call to dis(gen) generates a new random double

		info = dis(gen);
		put(begin, end, info);
	}
}

void writeQueue(spis1* begin, spis1* end)
{
	std::cout << "Queue values " << std::endl;
	spis1* temp = begin;
	while (temp != NULL)
	{
		std::cout << temp->info << ' ';
		temp = temp->next;
	}
	std::cout << std::endl << std::endl;
}

// the only one main mathod can be in the programm
// please change naming to main and rename duplicates in ther parts of application
int main1()
{
	spis1* begin = NULL;
	spis1* end = NULL;

	createRandomQueue(&begin, &end, 10);

	writeQueue(begin, end);

	std::cout << get(&begin, &end) << " taken from queue" << std::endl << std::endl;

	writeQueue(begin, end);

	clear(&begin, &end);

	return 0;
}