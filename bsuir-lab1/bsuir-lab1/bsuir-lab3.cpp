#include <iostream>
#include <random>

// data definition
struct spis2
{
	int info;
	spis2* next;
	spis2* prev;
};

// methods definitions
void create(spis2** begin, spis2** end, int info);
void addFirst(spis2** begin, spis2** end, int info);
void addLast(spis2** begin, spis2** end, int info);
int pollFirst(spis2** begin, spis2** end);
int pollLast(spis2** begin, spis2** end);
void remove(spis2** begin, spis2** end, int element);

void writeTop(spis2* begin, spis2* end);
void writeBottom(spis2* begin, spis2* end);

void createRandom(spis2** begin, spis2** end, int size);
void createPositiveAndNegative(spis2** begin, spis2** end, spis2** pBegin, spis2** pEnd, spis2** nBegin, spis2** nEnd);

// methods implementations

void create(spis2** begin, spis2** end, int info)
{
	spis2* temp = new spis2;
	temp->info = info;
	temp->next = temp->prev = NULL;
	*begin = *end = temp;
}

void addFirst(spis2** begin, spis2** end, int info)
{
	if (*begin == NULL && *end == NULL)
	{
		create(begin, end, info);
	}
	else
	{
		spis2* temp = new spis2;
		temp->info = info;
		temp->prev = NULL;
		temp->next = *begin;
		if (*begin != NULL) (*begin)->prev = temp;
		*begin = temp;
	}
}

void addLast(spis2** begin, spis2** end, int info)
{
	if (*begin == NULL && *end == NULL)
	{
		create(begin, end, info);
	}
	else
	{
		spis2* temp = new spis2;
		temp->info = info;
		temp->next = NULL;
		temp->prev = *end;
		(*end)->next = temp;
		*end = temp;
	}
}

int pollFirst(spis2** begin, spis2** end)
{
	if (*begin == NULL) return NULL;

	spis2* temp = *begin;
	int info = temp->info;
	temp->prev = NULL;
	(*begin) = (*begin)->next;
	delete temp;

	return info;
}

int pollLast(spis2** begin, spis2** end)
{
	if (*end == NULL) return NULL;

	spis2* temp = *end;
	int info = temp->info;
	temp->next = NULL;
	(*end) = (*end)->prev;
	delete temp;

	return info;
}

void remove(spis2** begin, spis2** end, int element)
{
	spis2* temp = *begin;
	while (temp != NULL)
	{
		if (temp->info == element)
		{
			// has top and bottom elements
			if (temp->prev != NULL && temp->next != NULL)
			{
				temp->prev->next = temp->next;
				temp->next->prev = temp->prev;
			}
			// hasn't top, but has bottom elements
			else if (temp->prev == NULL && temp->next != NULL)
			{
				temp->next->prev = NULL;
			}
			// has top, but hasn't bottom elements
			else if (temp->prev != NULL && temp->next == NULL)
			{
				temp->prev->next = NULL;
			}

			temp->next = NULL;
			temp->prev = NULL;
			delete temp;
		}
		temp = temp->next;
	}
}

void clear(spis2** begin, spis2** end)
{
	spis2* temp; int info;

	while (*begin != NULL)
	{
		temp = *begin;
		info = temp->info;
		// std::cout << inf << std::endl;
		if (temp->next != NULL)
		{
			temp->next->prev = NULL;
		}
		*begin = temp->next;
		delete temp;
	}
}

void writeTop(spis2* begin, spis2* end)
{
	std::cout << "Queue values top " << std::endl;
	spis2* temp = begin;
	while (temp != NULL)
	{
		std::cout << temp->info << ' ';
		temp = temp->next;
	}
	std::cout << std::endl << std::endl;
}

void writeBottom(spis2* begin, spis2* end)
{
	std::cout << "Queue values bottom " << std::endl;
	spis2* temp = end;
	while (temp != NULL)
	{
		std::cout << temp->info << ' ';
		temp = temp->prev;
	}
	std::cout << std::endl << std::endl;
}

void createRandom(spis2** begin, spis2** end, int size)
{
	std::random_device rd;  //Will be used to obtain a seed for the random number engine
	std::mt19937_64 gen(rd()); //Standard mersenne_twister_engine seeded with rd()
	std::uniform_int_distribution<int> dis(-50, 50);

	int info = NULL;
	for (int n = 0; n < size; ++n) {
		// Use dis to transform the random unsigned int generated by gen into a
		// double in [1, 2). Each call to dis(gen) generates a new random double

		info = dis(gen);
		addFirst(begin, end, info);
	}
}

void createPositiveAndNegative(spis2** begin, spis2** end, spis2** pBegin, spis2** pEnd, spis2** nBegin, spis2** nEnd)
{
	spis2* tempOrig = *begin;
	int tempInfo = NULL;

	while ((*begin) != NULL)
	{
		tempInfo = pollFirst(begin, end);
		if (tempInfo >= 0)
		{
			addFirst(pBegin, pEnd, tempInfo);
		}
		else
		{
			addLast(nBegin, nEnd, tempInfo);
		}
	}

}

// This is the worst style of the development I've ever heard.
// In the real life you have to avoid multiple stars. ** is something unusual.
// The code have to be rewritten in the OOP style to use classes!!!
int main()
{
	spis2* begin = NULL;
	spis2* end = NULL;

	spis2* pBegin = NULL;
	spis2* pEnd = NULL;

	spis2* nBegin = NULL;
	spis2* nEnd = NULL;

	createRandom(&begin, &end, 10);

	writeTop(begin, end);
	writeBottom(begin, end);

	createPositiveAndNegative(&begin, &end, &pBegin, &pEnd, &nBegin, &nEnd);
	writeTop(pBegin, pEnd);
	writeTop(nBegin, nEnd);

	clear(&begin, &end);
	clear(&pBegin, &pEnd);
	clear(&nBegin, &nEnd);

	return 0;
}