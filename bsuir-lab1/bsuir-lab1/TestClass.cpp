#include "testClass.h"

class TestClass
{
public:
	void execute()
	{
		tstk1* randomStack = this->createRandomStack(10);
		tstk1* positiveStack = this->createPositiveStack(randomStack);
		tstk1* negativeStack = this->createNegativeStack(randomStack);

		this->writeStack(randomStack);
		this->writeStack(positiveStack);
		this->writeStack(negativeStack);
	}

	tstk1* push(tstk1* sp, int inf)
	{
		tstk1* spt = new tstk1;
		spt->inf = inf;
		spt->a = sp;
		return spt;
	}

	tstk1* pop(tstk1* sp, int& inf)
	{
		if (sp == NULL) return NULL;

		tstk1* spt = sp;
		inf = sp->inf;
		sp = sp->a;
		delete spt;
		return sp;
	}

	tstk1* clear(tstk1* sp)
	{
		tstk1* spt; int inf;

		while (sp != NULL)
		{
			spt = sp;
			inf = sp->inf;
			// std::cout << inf << std::endl;
			sp = sp->a;
			delete spt;
		}

		return NULL;
	}

	tstk1* createRandomStack(int size)
	{
		std::random_device rd;  //Will be used to obtain a seed for the random number engine
		std::mt19937_64 gen(rd()); //Standard mersenne_twister_engine seeded with rd()
		std::uniform_int_distribution<int> dis(-50, 50);

		tstk1* spt = NULL;
		int inf = NULL;
		for (int n = 0; n < size; ++n) {
			// Use dis to transform the random unsigned int generated by gen into a
			// double in [1, 2). Each call to dis(gen) generates a new random double

			inf = dis(gen);
			// std::cout << inf << ' ';
			spt = this->push(spt, inf);

		}
		std::cout << std::endl;

		return spt;
	}

	tstk1* createPositiveStack(tstk1* sp)
	{
		tstk1* positiveSp = NULL;
		tstk1* spt = sp;
		while (spt != NULL)
		{
			if (spt->inf > -1)
			{
				positiveSp = this->push(positiveSp, spt->inf);
			}
			spt = spt->a;
		}
		return positiveSp;
	}

	tstk1* createNegativeStack(tstk1* sp)
	{
		tstk1* negativeSp = NULL;
		tstk1* spt = sp;
		while (spt != NULL)
		{
			if (spt->inf < 0)
			{
				negativeSp = this->push(negativeSp, spt->inf);
			}
			spt = spt->a;
		}
		return negativeSp;
	}

	void writeStack(tstk1* sp)
	{
		std::cout << "stack values " << std::endl;
		tstk1* spt = sp;
		while (spt != NULL)
		{
			std::cout << spt->inf << ' ';
			spt = spt->a;
		}
		std::cout << std::endl << std::endl;
	}

};


