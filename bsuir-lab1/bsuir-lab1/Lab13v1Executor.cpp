#include <random>
#include "Lab13v1Executor.h"

Lab13v1Executor::Lab13v1Executor()
{
	randomStack = new Lab13v1();
	positiveStack = new Lab13v1();
	negativeStack = new Lab13v1();
}

void Lab13v1Executor::execute()
{
	this->createRandomStack(20);
	std::cout << "Initial Random stack";
	randomStack->outputValues();

	this->createStacks(randomStack);

	std::cout << "Positive stack";
	positiveStack->outputValues();

	std::cout << "Negative stack";
	negativeStack->outputValues();
}

void Lab13v1Executor::createRandomStack(int size)
{
	std::random_device rd;  //Will be used to obtain a seed for the random number engine
	std::mt19937_64 gen(rd()); //Standard mersenne_twister_engine seeded with rd()
	std::uniform_int_distribution<int> dis(-50, 50);

	int inf = NULL;
	for (int n = 0; n < size; ++n) {
		// Use dis to transform the random unsigned int generated by gen into a 
		// double in [1, 2). Each call to dis(gen) generates a new random double
		inf = dis(gen);
		randomStack->push(inf);
	}
}

void Lab13v1Executor::createStacks(Lab13v1* stack)
{
	int inf = NULL;
	while (stack->hasNext())
	{
		inf = stack->pop();
		if (inf >= 0)
		{
			positiveStack->push(inf);
		}
		else
		{
			negativeStack->push(inf);
		}
	}

}

Lab13v1Executor::~Lab13v1Executor()
{
	delete randomStack;
	delete positiveStack;
	delete negativeStack;
}
