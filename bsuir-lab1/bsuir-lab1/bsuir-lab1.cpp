// bsuir-lab1.cpp : This file contains the 'main' function. Program execution begins and ends there.
//


#include <iostream>
#include <random>

struct tstk
{
	int inf;
	tstk* a;
};

tstk* push(tstk* sp, int inf)
{
	tstk* spt = new tstk;
	spt->inf = inf;
	spt->a = sp;
	return spt;
}

tstk* pop(tstk* sp, int& inf)
{
	if (sp == NULL) return NULL;

	tstk* spt = sp;
	inf = sp->inf;
	sp = sp->a;
	delete spt;
	return sp;
}

tstk* clear(tstk* sp)
{
	tstk* spt; int inf;

	while (sp != NULL)
	{
		spt = sp;
		inf = sp->inf;
		// std::cout << inf << std::endl;
		sp = sp->a;
		delete spt;
	}

	return NULL;
}

tstk* createRandomStack(int size)
{
	std::random_device rd;  //Will be used to obtain a seed for the random number engine
	std::mt19937_64 gen(rd()); //Standard mersenne_twister_engine seeded with rd()
	std::uniform_int_distribution<int> dis(-50, 50);

	tstk* spt = NULL;
	int inf = NULL;
	for (int n = 0; n < size; ++n) {
		// Use dis to transform the random unsigned int generated by gen into a
		// double in [1, 2). Each call to dis(gen) generates a new random double

		inf = dis(gen);
		// std::cout << inf << ' ';
		spt = push(spt, inf);

	}
	std::cout << std::endl;

	return spt;
}

tstk* createPositiveStack(tstk* sp)
{
	tstk* positiveSp = NULL;
	tstk* spt = sp;
	while (spt != NULL)
	{
		if (spt->inf > -1)
		{
			positiveSp = push(positiveSp, spt->inf);
		}
		spt = spt->a;
	}
	return positiveSp;
}

tstk* createNegativeStack(tstk* sp)
{
	tstk* negativeSp = NULL;
	tstk* spt = sp;
	while (spt != NULL)
	{
		if (spt->inf < 0)
		{
			negativeSp = push(negativeSp, spt->inf);
		}
		spt = spt->a;
	}
	return negativeSp;
}

void writeStack(tstk* sp)
{
	std::cout << "stack values " << std::endl;
	tstk* spt = sp;
	while (spt != NULL)
	{
		std::cout << spt->inf << ' ';
		spt = spt->a;
	}
	std::cout << std::endl << std::endl;
}


void execute()
{

	tstk* randomStack = createRandomStack(10);
	tstk* positiveStack = createPositiveStack(randomStack);
	tstk* negativeStack = createNegativeStack(randomStack);

	writeStack(randomStack);
	writeStack(positiveStack);
	writeStack(negativeStack);

	clear(randomStack);
	clear(positiveStack);
	clear(negativeStack);

}